{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger CourseApp - OpenAPI 3.0",
    "version": "1.0.11"
  },
  "servers": [
    {
      "url": "https://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "CourseController",
      "description": "Access to Coursestore"
    },
    {
      "name": "UserController",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/course/{id}": {
      "get": {
        "tags": [
          "CourseController"
        ],
        "summary": "Get Course by id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID course",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          }
        },
        "security": [
          {
            "Coursestore_auth": [
              "write:Courses",
              "read:Courses"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "CourseController"
        ],
        "summary": "Add a new Course to the store",
        "description": "Add a new Course to the store",
        "operationId": "addCourse",
        "requestBody": {
          "description": "Create a new Course in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/"
              }
            }
          
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Coursestore_auth": [
              "write:Courses",
              "read:Courses"
            ]
          }
        ]
      }
      
    },
    "/course": {
      "get": {
        "tags": [
          "CourseController"
        ],
        "summary": "Get list Course",
        "description": "Get list Course",
        "operationId": "get list Course",
        "responses": {
          "200": {
            "description": "Successful operation"
            
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Course not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }  
      },
      "post": {
        "tags": [
          "CourseController"
        ],
        "summary": "Add a new Course to the store",
        "description": "Add a new Course to the store",
        "operationId": "addCourse",
        "requestBody": {
          "description": "Create a new Course in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            }
          
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Coursestore_auth": [
              "write:Courses",
              "read:Courses"
            ]
          }
        ]
      }
      
    },
    "/user": {
      "post": {
        "tags": [
          "UserController"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            } 
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "UserController"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "UserController"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "UserController"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Course": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Node.JS tutorial"
          },
          "courseId": {
            "type": "string",
            "format": "int64",
            "example": 1
          },
          "price": {
            "type": "integer",
            "format": "int32",
            "example": 700
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "soldOut": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        
        },
        "xml": {
          "name": "user"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },

    "securitySchemes": {
      "Coursestore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://Coursestore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:Courses": "modify Courses in your account",
              "read:Courses": "read your Courses"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}